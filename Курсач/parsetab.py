
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSleftORleftANDAND BEGIN BREAK COLON COMMA CONTINUE DIVIDE DO DOT END EQUALLY FUNCTION ID IF INTEGER LPAREN MAX MAXEQ MIN MINEQ MINMAX MINUS NOT OR PLUS PRISV PROCEDURE PROGRAM REAL RPAREN SEMICOLON STRLIT THEN TIMES VAR WHILE WRITE integer realprogram : PROGRAM ID SEMICOLON vars block_function block DOT block_function : empty\n             | block_function function SEMICOLON\n            | function SEMICOLON\n            |  block_function procedure SEMICOLON\n            | procedure SEMICOLONblock : BEGIN statement ENDvars : empty\n            | VAR declarations declarations : id_name COLON typ SEMICOLON\n                    | declarations id_name COLON typ SEMICOLONtyp : INTEGER\n            | REALid_name : ID\n                | id_name COMMA IDparam : LPAREN id_name COLON typ RPAREN\n            | LPAREN id_name COLON typ SEMICOLON id_name COLON typ RPARENprocedure : PROCEDURE ID param SEMICOLON vars blockfunction : FUNCTION ID param COLON typ SEMICOLON vars blockvisf : ID LPAREN id_name RPARENstatement : statement vir SEMICOLON\n                | vir SEMICOLON assignstmt : ID PRISV expression\n                    | ID PRISV visfvir :  assignstmt\n            | writestmt\n            | ifstmt\n            | whilestmt writestmt : WRITE ideide : LPAREN vn RPARENvn : text\n            | factortext : STRLIT\n            | STRLIT COMMA STRLITnot : NOT\n                | emptyifstmt : IF condition THEN vir1\n            | IF condition THEN block1block1 : BEGIN statement1 ENDstatement1 : statement1 vir1 SEMICOLON\n                | vir1 SEMICOLON vir1 :  assignstmt\n            | writestmt\n            | ifstmt\n            | whilestmt\n            | BREAK\n            | CONTINUEwhilestmt : WHILE condition DO vir\n                | WHILE condition DO blockcondition : condition OR condition\n                | condition AND condition\n                | not LPAREN condition RPAREN\n                | not bobo : LPAREN expression vibor expression RPARENvibor : EQUALLY\n            | MIN\n            | MINEQ\n            | MAX\n            | MAXEQ\n            | MINMAXexpression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression TIMES expression\n                   | expression DIVIDE expression\n                   | MINUS expression %prec UMINUS\n                   | LPAREN expression RPAREN\n                   | integer\n                   | real\n                   | IDfactor :  integer\n                 | real\n                 | IDempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,28,],[0,-1,]),'ID':([2,7,12,13,14,20,27,31,42,51,52,54,64,65,69,70,80,83,85,89,90,91,92,93,94,108,125,128,129,130,131,132,133,134,137,141,145,],[3,16,23,24,16,37,48,37,16,-22,66,79,-10,-21,96,96,37,96,37,-11,16,96,96,96,96,37,37,96,-55,-56,-57,-58,-59,-60,16,-41,-40,]),'SEMICOLON':([3,10,11,18,19,32,33,34,35,36,43,45,46,47,49,50,53,63,66,67,68,71,72,86,95,96,98,100,101,102,103,104,105,106,107,113,114,116,117,119,120,121,122,123,126,136,138,139,140,143,149,],[4,21,22,29,30,51,-25,-26,-27,-28,62,64,-12,-13,-7,65,-29,89,-69,-23,-24,-67,-68,115,-65,-69,-30,-37,-38,-42,-43,-44,-45,-46,-47,-48,-49,137,-18,-61,-62,-63,-64,-66,141,-16,-20,-39,145,-19,-17,]),'VAR':([4,62,115,],[7,7,7,]),'FUNCTION':([4,5,6,8,9,14,21,22,29,30,64,89,],[-73,12,-8,12,-2,-9,-4,-6,-3,-5,-10,-11,]),'PROCEDURE':([4,5,6,8,9,14,21,22,29,30,64,89,],[-73,13,-8,13,-2,-9,-4,-6,-3,-5,-10,-11,]),'BEGIN':([4,5,6,8,9,14,21,22,29,30,62,64,80,85,88,89,115,135,],[-73,-73,-8,20,-2,-9,-4,-6,-3,-5,-73,-10,108,20,20,-11,-73,20,]),'COLON':([15,16,25,41,48,61,136,144,149,],[26,-14,44,60,-15,87,-16,147,-17,]),'COMMA':([15,16,25,48,61,76,118,144,],[27,-14,27,-15,27,99,27,27,]),'RPAREN':([16,46,47,48,71,72,73,74,75,76,77,78,79,84,95,96,97,109,110,111,116,118,119,120,121,122,123,124,127,142,146,148,],[-14,-12,-13,-15,-67,-68,98,-31,-32,-33,-70,-71,-72,-53,-65,-69,123,-50,-51,127,136,138,-61,-62,-63,-64,-66,-34,-52,146,-54,149,]),'DOT':([17,49,],[28,-7,]),'WRITE':([20,31,51,65,80,85,108,125,141,145,],[38,38,-22,-21,38,38,38,38,-41,-40,]),'IF':([20,31,51,65,80,85,108,125,141,145,],[39,39,-22,-21,39,39,39,39,-41,-40,]),'WHILE':([20,31,51,65,80,85,108,125,141,145,],[40,40,-22,-21,40,40,40,40,-41,-40,]),'LPAREN':([23,24,38,39,40,52,56,57,58,66,69,70,81,82,83,91,92,93,94,128,129,130,131,132,133,134,],[42,42,54,-73,-73,70,83,-35,-36,90,70,70,-73,-73,70,70,70,70,70,70,-55,-56,-57,-58,-59,-60,]),'INTEGER':([26,44,60,87,147,],[46,46,46,46,46,]),'REAL':([26,44,60,87,147,],[47,47,47,47,47,]),'END':([31,51,65,125,141,145,],[49,-22,-21,139,-41,-40,]),'PRISV':([37,],[52,]),'NOT':([39,40,81,82,83,],[57,57,57,57,57,]),'MINUS':([52,66,67,69,70,71,72,83,91,92,93,94,95,96,97,112,119,120,121,122,123,128,129,130,131,132,133,134,142,],[69,-69,92,69,69,-67,-68,69,69,69,69,69,-65,-69,92,92,-61,-62,-63,-64,-66,69,-55,-56,-57,-58,-59,-60,92,]),'integer':([52,54,69,70,83,91,92,93,94,128,129,130,131,132,133,134,],[71,77,71,71,71,71,71,71,71,71,-55,-56,-57,-58,-59,-60,]),'real':([52,54,69,70,83,91,92,93,94,128,129,130,131,132,133,134,],[72,78,72,72,72,72,72,72,72,72,-55,-56,-57,-58,-59,-60,]),'STRLIT':([54,99,],[76,124,]),'THEN':([55,84,109,110,127,146,],[80,-53,-50,-51,-52,-54,]),'OR':([55,59,84,109,110,111,127,146,],[81,81,-53,-50,-51,81,-52,-54,]),'AND':([55,59,84,109,110,111,127,146,],[82,82,-53,82,-51,82,-52,-54,]),'DO':([59,84,109,110,127,146,],[85,-53,-50,-51,-52,-54,]),'PLUS':([66,67,71,72,95,96,97,112,119,120,121,122,123,142,],[-69,91,-67,-68,-65,-69,91,91,-61,-62,-63,-64,-66,91,]),'TIMES':([66,67,71,72,95,96,97,112,119,120,121,122,123,142,],[-69,93,-67,-68,-65,-69,93,93,93,93,-63,-64,-66,93,]),'DIVIDE':([66,67,71,72,95,96,97,112,119,120,121,122,123,142,],[-69,94,-67,-68,-65,-69,94,94,94,94,-63,-64,-66,94,]),'EQUALLY':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,129,-61,-62,-63,-64,-66,]),'MIN':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,130,-61,-62,-63,-64,-66,]),'MINEQ':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,131,-61,-62,-63,-64,-66,]),'MAX':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,132,-61,-62,-63,-64,-66,]),'MAXEQ':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,133,-61,-62,-63,-64,-66,]),'MINMAX':([71,72,95,96,112,119,120,121,122,123,],[-67,-68,-65,-69,134,-61,-62,-63,-64,-66,]),'BREAK':([80,108,125,141,145,],[106,106,106,-41,-40,]),'CONTINUE':([80,108,125,141,145,],[107,107,107,-41,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,62,115,],[5,88,135,]),'empty':([4,5,39,40,62,81,82,83,115,],[6,9,58,58,6,58,58,58,6,]),'block_function':([5,],[8,]),'function':([5,8,],[10,18,]),'procedure':([5,8,],[11,19,]),'declarations':([7,],[14,]),'id_name':([7,14,42,90,137,],[15,25,61,118,144,]),'block':([8,85,88,135,],[17,114,117,143,]),'statement':([20,],[31,]),'vir':([20,31,85,],[32,50,113,]),'assignstmt':([20,31,80,85,108,125,],[33,33,102,33,102,102,]),'writestmt':([20,31,80,85,108,125,],[34,34,103,34,103,103,]),'ifstmt':([20,31,80,85,108,125,],[35,35,104,35,104,104,]),'whilestmt':([20,31,80,85,108,125,],[36,36,105,36,105,105,]),'param':([23,24,],[41,43,]),'typ':([26,44,60,87,147,],[45,63,86,116,148,]),'ide':([38,],[53,]),'condition':([39,40,81,82,83,],[55,59,109,110,111,]),'not':([39,40,81,82,83,],[56,56,56,56,56,]),'expression':([52,69,70,83,91,92,93,94,128,],[67,95,97,112,119,120,121,122,142,]),'visf':([52,],[68,]),'vn':([54,],[73,]),'text':([54,],[74,]),'factor':([54,],[75,]),'bo':([56,],[84,]),'vir1':([80,108,125,],[100,126,140,]),'block1':([80,],[101,]),'statement1':([108,],[125,]),'vibor':([112,],[128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars block_function block DOT','program',7,'p_program','Parser.py',35),
  ('block_function -> empty','block_function',1,'p_block_function','Parser.py',39),
  ('block_function -> block_function function SEMICOLON','block_function',3,'p_block_function','Parser.py',40),
  ('block_function -> function SEMICOLON','block_function',2,'p_block_function','Parser.py',41),
  ('block_function -> block_function procedure SEMICOLON','block_function',3,'p_block_function','Parser.py',42),
  ('block_function -> procedure SEMICOLON','block_function',2,'p_block_function','Parser.py',43),
  ('block -> BEGIN statement END','block',3,'p_block','Parser.py',52),
  ('vars -> empty','vars',1,'p_vars','Parser.py',56),
  ('vars -> VAR declarations','vars',2,'p_vars','Parser.py',57),
  ('declarations -> id_name COLON typ SEMICOLON','declarations',4,'p_declarations','Parser.py',64),
  ('declarations -> declarations id_name COLON typ SEMICOLON','declarations',5,'p_declarations','Parser.py',65),
  ('typ -> INTEGER','typ',1,'p_typ','Parser.py',72),
  ('typ -> REAL','typ',1,'p_typ','Parser.py',73),
  ('id_name -> ID','id_name',1,'p_id_name','Parser.py',77),
  ('id_name -> id_name COMMA ID','id_name',3,'p_id_name','Parser.py',78),
  ('param -> LPAREN id_name COLON typ RPAREN','param',5,'p_param','Parser.py',85),
  ('param -> LPAREN id_name COLON typ SEMICOLON id_name COLON typ RPAREN','param',9,'p_param','Parser.py',86),
  ('procedure -> PROCEDURE ID param SEMICOLON vars block','procedure',6,'p_procedure','Parser.py',93),
  ('function -> FUNCTION ID param COLON typ SEMICOLON vars block','function',8,'p_function','Parser.py',97),
  ('visf -> ID LPAREN id_name RPAREN','visf',4,'p_visf','Parser.py',101),
  ('statement -> statement vir SEMICOLON','statement',3,'p_statement','Parser.py',105),
  ('statement -> vir SEMICOLON','statement',2,'p_statement','Parser.py',106),
  ('assignstmt -> ID PRISV expression','assignstmt',3,'p_assignstmt','Parser.py',113),
  ('assignstmt -> ID PRISV visf','assignstmt',3,'p_assignstmt','Parser.py',114),
  ('vir -> assignstmt','vir',1,'p_vir','Parser.py',118),
  ('vir -> writestmt','vir',1,'p_vir','Parser.py',119),
  ('vir -> ifstmt','vir',1,'p_vir','Parser.py',120),
  ('vir -> whilestmt','vir',1,'p_vir','Parser.py',121),
  ('writestmt -> WRITE ide','writestmt',2,'p_writestmt','Parser.py',125),
  ('ide -> LPAREN vn RPAREN','ide',3,'p_ide','Parser.py',129),
  ('vn -> text','vn',1,'p_vn','Parser.py',133),
  ('vn -> factor','vn',1,'p_vn','Parser.py',134),
  ('text -> STRLIT','text',1,'p_text','Parser.py',138),
  ('text -> STRLIT COMMA STRLIT','text',3,'p_text','Parser.py',139),
  ('not -> NOT','not',1,'p_not','Parser.py',147),
  ('not -> empty','not',1,'p_not','Parser.py',148),
  ('ifstmt -> IF condition THEN vir1','ifstmt',4,'p_ifstmt','Parser.py',152),
  ('ifstmt -> IF condition THEN block1','ifstmt',4,'p_ifstmt','Parser.py',153),
  ('block1 -> BEGIN statement1 END','block1',3,'p_block1','Parser.py',157),
  ('statement1 -> statement1 vir1 SEMICOLON','statement1',3,'p_statement1','Parser.py',161),
  ('statement1 -> vir1 SEMICOLON','statement1',2,'p_statement1','Parser.py',162),
  ('vir1 -> assignstmt','vir1',1,'p_vir1','Parser.py',169),
  ('vir1 -> writestmt','vir1',1,'p_vir1','Parser.py',170),
  ('vir1 -> ifstmt','vir1',1,'p_vir1','Parser.py',171),
  ('vir1 -> whilestmt','vir1',1,'p_vir1','Parser.py',172),
  ('vir1 -> BREAK','vir1',1,'p_vir1','Parser.py',173),
  ('vir1 -> CONTINUE','vir1',1,'p_vir1','Parser.py',174),
  ('whilestmt -> WHILE condition DO vir','whilestmt',4,'p_whilestmt','Parser.py',178),
  ('whilestmt -> WHILE condition DO block','whilestmt',4,'p_whilestmt','Parser.py',179),
  ('condition -> condition OR condition','condition',3,'p_condition','Parser.py',185),
  ('condition -> condition AND condition','condition',3,'p_condition','Parser.py',186),
  ('condition -> not LPAREN condition RPAREN','condition',4,'p_condition','Parser.py',187),
  ('condition -> not bo','condition',2,'p_condition','Parser.py',188),
  ('bo -> LPAREN expression vibor expression RPAREN','bo',5,'p_bo','Parser.py',197),
  ('vibor -> EQUALLY','vibor',1,'p_vibor','Parser.py',201),
  ('vibor -> MIN','vibor',1,'p_vibor','Parser.py',202),
  ('vibor -> MINEQ','vibor',1,'p_vibor','Parser.py',203),
  ('vibor -> MAX','vibor',1,'p_vibor','Parser.py',204),
  ('vibor -> MAXEQ','vibor',1,'p_vibor','Parser.py',205),
  ('vibor -> MINMAX','vibor',1,'p_vibor','Parser.py',206),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Parser.py',213),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Parser.py',214),
  ('expression -> expression TIMES expression','expression',3,'p_expression','Parser.py',215),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','Parser.py',216),
  ('expression -> MINUS expression','expression',2,'p_expression','Parser.py',217),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','Parser.py',218),
  ('expression -> integer','expression',1,'p_expression','Parser.py',219),
  ('expression -> real','expression',1,'p_expression','Parser.py',220),
  ('expression -> ID','expression',1,'p_expression','Parser.py',221),
  ('factor -> integer','factor',1,'p_factor','Parser.py',233),
  ('factor -> real','factor',1,'p_factor','Parser.py',234),
  ('factor -> ID','factor',1,'p_factor','Parser.py',235),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',241),
]
